(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{58:function(n,e,t){"use strict";t.r(e);var i=t(0),a=Object(i.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var n=this.$createElement,e=this._self._c||n;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"golang-算法进度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#golang-算法进度","aria-hidden":"true"}},[this._v("#")]),this._v(" golang 算法进度")]),this._v(" "),e("h2",{attrs:{id:"单链表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单链表","aria-hidden":"true"}},[this._v("#")]),this._v(" 单链表")]),this._v(" "),e("div",{staticClass:"language-golang extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('package main\n\n//链表实现\nimport (\n    "fmt"\n    "os"\n)\n\n//定义错误常量\nconst (\n    ERROR = -1000000001\n)\n\n//定义元素类型\ntype Element int64\n\n//定义节点\ntype LinkNode struct {\n    Data Element   //数据域\n    Nest *LinkNode //指针域，指向下一个节点\n}\n\n//函数接口\ntype LinkNoder interface {\n    Add(head *LinkNode, new *LinkNode)              //后面添加\n    Delete(head *LinkNode, index int)               //删除指定index位置元素\n    Insert(head *LinkNode, index int, data Element) //在指定index位置插入元素\n    GetLength(head *LinkNode) int                   //获取长度\n    Search(head *LinkNode, data Element)            //查询元素的位置\n    GetData(head *LinkNode, index int) Element      //获取指定index位置的元素\n}\n\n//添加 头结点，数据\nfunc Add(head *LinkNode, data Element) {\n    point := head //临时指针\n    for point.Nest != nil {\n        point = point.Nest //移位\n    }\n    var node LinkNode  //新节点\n    point.Nest = &node //赋值\n    node.Data = data\n\n    head.Data = Element(GetLength(head)) //打印全部的数据\n\n    if GetLength(head) > 1 {\n        Traverse(head)\n    }\n\n}\n\n//删除 头结点 index 位置\nfunc Delete(head *LinkNode, index int) Element {\n    //判断index合法性\n    if index < 0 || index > GetLength(head) {\n        fmt.Println("please check index")\n        return ERROR\n    } else {\n        point := head\n        for i := 0; i < index-1; i++ {\n            point = point.Nest //移位\n        }\n        point.Nest = point.Nest.Nest //赋值\n        data := point.Nest.Data\n        return data\n    }\n}\n\n//插入 头结点 index位置 data元素\nfunc Insert(head *LinkNode, index int, data Element) {\n    //检验index合法性\n    if index < 0 || index > GetLength(head) {\n        fmt.Println("please check index")\n    } else {\n        point := head\n        for i := 0; i < index-1; i++ {\n            point = point.Nest //移位\n        }\n        var node LinkNode //新节点，赋值\n        node.Data = data\n        node.Nest = point.Nest\n        point.Nest = &node\n    }\n}\n\n//获取长度 头结点\nfunc GetLength(head *LinkNode) int {\n    point := head\n    var length int\n    for point.Nest != nil {\n        length++\n        point = point.Nest\n    }\n    return length\n}\n\n//搜索 头结点 data元素\nfunc Search(head *LinkNode, data Element) {\n    point := head\n    index := 0\n    for point.Nest != nil {\n        if point.Data == data {\n            fmt.Println(data, "exist at", index, "th")\n            break\n        } else {\n            index++\n            point = point.Nest\n            if index > GetLength(head)-1 {\n                fmt.Println(data, "not exist at")\n                break\n            }\n            continue\n        }\n    }\n}\n\n//获取data 头结点 index位置\nfunc GetData(head *LinkNode, index int) Element {\n    point := head\n    if index < 0 || index > GetLength(head) {\n        fmt.Println("please check index")\n        return ERROR\n    } else {\n        for i := 0; i < index; i++ {\n            point = point.Nest\n        }\n        return point.Data\n    }\n}\n\n//遍历 头结点\nfunc Traverse(head *LinkNode) {\n    point := head.Nest\n    for point.Nest != nil {\n        fmt.Println(point.Data)\n        point = point.Nest\n    }\n    fmt.Println("Traverse OK!")\n}\n\n//主函数测试\nfunc main() {\n    var head LinkNode = LinkNode{Data: 0, Nest: nil}\n    head.Data = 0\n    var nodeArray []Element\n    for i := 0; i < 10; i++ {\n        nodeArray = append(nodeArray, Element(i+1+i*100))\n        Add(&head, nodeArray[i])\n\n    }\n\n    Delete(&head, 3)\n    Search(&head, 2032)\n    Insert(&head, 23, 10010)\n    Traverse(&head)\n    fmt.Println("data is", GetData(&head, 6))\n    fmt.Println("length:", GetLength(&head))\n    os.Exit(0)\n}\n\n')])])])])}],!1,null,null,null);e.default=a.exports}}]);