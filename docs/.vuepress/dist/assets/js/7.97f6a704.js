(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{64:function(t,n,a){"use strict";a.r(n);var s=a(0),e=Object(s.a)({},function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),a("p",[t._v("单链表是一种链式存取的数据结构，用一组地址任意的存储单元存放线性表中的数据元素。链表中的数据是以结点来表示的，每个结点的构成：元素(数据元素的映象) + 指针(指示后继元素存储位置)，元素就是存储数据的存储单元，指针就是连接每个结点的地址数据。")]),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),a("p",[a("a",{attrs:{href:"https://segmentfault.com/a/1190000007442806",target:"_blank",rel:"noopener noreferrer"}},[t._v("外链接"),a("OutboundLink")],1)]),t._v(" "),t._m(7),t._m(8),t._v(" "),a("p",[a("a",{attrs:{href:"https://my.oschina.net/90design/blog/1813377",target:"_blank",rel:"noopener noreferrer"}},[t._v("双链表 list"),a("OutboundLink")],1)]),t._v(" "),t._m(9),t._m(10),t._v(" "),t._m(11),t._m(12),t._v(" "),t._m(13),t._m(14),t._v(" "),t._m(15),t._m(16),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.jianshu.com/p/dc94f2099277",target:"_blank",rel:"noopener noreferrer"}},[t._v("并发,线程锁"),a("OutboundLink")],1)]),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._m(20),t._v(" "),t._m(21),t._m(22),t._v(" "),t._m(23),t._m(24),t._v(" "),t._m(25),t._m(26),t._v(" "),t._m(27),t._m(28),t._v(" "),t._m(29),t._m(30),t._v(" "),t._m(31),t._m(32),t._v(" "),t._m(33),t._m(34),t._v(" "),t._m(35),t._v(" "),t._m(36),t._m(37),t._v(" "),a("p",[a("a",{attrs:{href:"https://gobyexample.xgwang.me/?nsukey=VGF60Wh3svD3%2Bbwds9mcOvX%2B9%2BfqrHC1IiK4VOhVfvvyamIDfmPvhltjeW49MNgMHxPp8xoWDnsgdwK66g28QI7lRGrRzPk5tFwq972G9UB80K4HSKJXqfiaCn03Vd3lX8VBHPwqOzYaM8O%2FoGDZeUYhTm0J2DgkOTtPvqP9l3VSYMI%2F45sgrsKBrOcCTEJqxVIYFyu5KBtwTV1WtRbNZw%3D%3D",target:"_blank",rel:"noopener noreferrer"}},[t._v("语法重点"),a("OutboundLink")],1)]),t._v(" "),t._m(38)])},[function(){var t=this.$createElement,n=this._self._c||t;return n("h1",{attrs:{id:"golang-算法进度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#golang-算法进度","aria-hidden":"true"}},[this._v("#")]),this._v(" golang 算法进度")])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"单链表关键字"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#单链表关键字","aria-hidden":"true"}},[this._v("#")]),this._v(" 单链表关键字")])},function(){var t=this.$createElement,n=this._self._c||t;return n("ol",[n("li",[this._v("表头")]),this._v(" "),n("li",[this._v("首节点")]),this._v(" "),n("li",[this._v("尾节点")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"什么是单链表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是单链表","aria-hidden":"true"}},[this._v("#")]),this._v(" 什么是单链表")])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"单链表说明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#单链表说明","aria-hidden":"true"}},[this._v("#")]),this._v(" 单链表说明")])},function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ol",[a("li",[t._v("一个空的链表的长度是 0；只有首节点的链表长度是1；")]),t._v(" "),a("li",[t._v("索引 index = 0, 指的是链表的首节点；")]),t._v(" "),a("li",[t._v("Insert index = 0, 指的是插入一个首节点；")]),t._v(" "),a("li",[t._v("Delete index = 0 | 1, 指的是 删除首节点； index = 2, 删除第二个节点；")]),t._v(" "),a("li",[t._v("ADD, 指的是插入新的尾节点；")]),t._v(" "),a("li",[t._v("GetLength, 指的是获取链表的长度，不包括，表头；")]),t._v(" "),a("li",[t._v("GetData index = 0, 获取首节点；")]),t._v(" "),a("li",[t._v("SearchIndex: 返回某个节点是 data")]),t._v(" "),a("li",[t._v("Search: 返回某个值得 Index")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"单链表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#单链表","aria-hidden":"true"}},[this._v("#")]),this._v(" 单链表")])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language-golang extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('package main\n\n//链表实现\nimport (\n    "fmt"\n    "os"\n)\n\n//定义错误常量\nconst (\n    ERROR = -1000000001\n)\n\n//定义元素类型\ntype Element int64\n\n//定义节点\ntype LinkNode struct {\n    Data Element   //数据域\n    Nest *LinkNode //指针域，指向下一个节点\n}\n\n//函数接口\ntype LinkNoder interface {\n    Add(head *LinkNode, new *LinkNode)              //后面添加\n    Delete(head *LinkNode, index int)               //删除指定index位置元素\n    Insert(head *LinkNode, index int, data Element) //在指定index位置插入元素\n    GetLength(head *LinkNode) int                   //获取长度\n    Search(head *LinkNode, data Element)            //查询元素的位置\n    GetData(head *LinkNode, index int) Element      //获取指定index位置的元素\n}\n\n//添加 头结点，数据\nfunc Add(head *LinkNode, data Element) {\n    point := head //临时指针\n    for point.Nest != nil {\n        point = point.Nest //移位\n    }\n    var node LinkNode  //新节点\n    point.Nest = &node //赋值\n    node.Data = data\n\n    head.Data = Element(GetLength(head)) //打印全部的数据\n\n    if GetLength(head) > 1 {\n        Traverse(head)\n    }\n\n}\n\n//删除 头结点 index 位置\nfunc Delete(head *LinkNode, index int) Element {\n    //判断index合法性\n    if index < 0 || index > GetLength(head) {\n        fmt.Println("please check index")\n        return ERROR\n    } else {\n        point := head\n        for i := 0; i < index-1; i++ {\n            point = point.Nest //移位\n        }\n        point.Nest = point.Nest.Nest //赋值\n        data := point.Nest.Data\n        return data\n    }\n}\n\n//插入 头结点 index位置 data元素\nfunc Insert(head *LinkNode, index int, data Element) {\n    //检验index合法性\n    if index < 0 || index > GetLength(head) {\n        fmt.Println("please check index")\n    } else {\n        point := head\n        for i := 0; i < index-1; i++ {\n            point = point.Nest //移位\n        }\n        var node LinkNode //新节点，赋值\n        node.Data = data\n        node.Nest = point.Nest\n        point.Nest = &node\n    }\n}\n\n//获取长度 头结点\nfunc GetLength(head *LinkNode) int {\n    point := head\n    var length int\n    for point.Nest != nil {\n        length++\n        point = point.Nest\n    }\n    return length\n}\n\n//搜索 头结点 data元素\nfunc Search(head *LinkNode, data Element) {\n    point := head\n    index := 0\n    for point.Nest != nil {\n        if point.Data == data {\n            fmt.Println(data, "exist at", index, "th")\n            break\n        } else {\n            index++\n            point = point.Nest\n            if index > GetLength(head)-1 {\n                fmt.Println(data, "not exist at")\n                break\n            }\n            continue\n        }\n    }\n}\n\n//获取data 头结点 index位置\nfunc GetData(head *LinkNode, index int) Element {\n    point := head\n    if index < 0 || index > GetLength(head) {\n        fmt.Println("please check index")\n        return ERROR\n    } else {\n        for i := 0; i < index; i++ {\n            point = point.Nest\n        }\n        return point.Data\n    }\n}\n\n//遍历 头结点\nfunc Traverse(head *LinkNode) {\n    point := head.Nest\n    for point.Nest != nil {\n        fmt.Println(point.Data)\n        point = point.Nest\n    }\n    fmt.Println("Traverse OK!")\n}\n\n//主函数测试\nfunc main() {\n    var head LinkNode = LinkNode{Data: 0, Nest: nil}\n    head.Data = 0\n    var nodeArray []Element\n    for i := 0; i < 10; i++ {\n        nodeArray = append(nodeArray, Element(i+1+i*100))\n        Add(&head, nodeArray[i])\n\n    }\n\n    Delete(&head, 3)\n    Search(&head, 2032)\n    Insert(&head, 23, 10010)\n    Traverse(&head)\n    fmt.Println("data is", GetData(&head, 6))\n    fmt.Println("length:", GetLength(&head))\n    os.Exit(0)\n}\n\n')])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"双链表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#双链表","aria-hidden":"true"}},[this._v("#")]),this._v(" 双链表")])},function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" DNode "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tdata "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tprev "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("DNode\n\tnext "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("DNode\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" DList "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tsize "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint64")]),t._v("\n\thead "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("DNode\n\ttail "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("DNode\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("InitList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("DList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\talist "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" DList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\talist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\talist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("head "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v("\n\talist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tail "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("alist\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("DList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetSize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint64")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("size\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("DList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetHead")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("DNode "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("head\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("DList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetTail")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("DNode "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tail\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("DList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tnewNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("DNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetSize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("head "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newNode\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tail "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newNode\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tnewNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prev "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tail\n\t\tnewNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tail"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newNode\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tail "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newNode\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("size"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("DList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SearchIndex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("DNode "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetSize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tnode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetHead")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint64")]),t._v("\n\t\ti "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tnode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" node\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("DList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("DNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tcurrentNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("head\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("uint64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetSize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" currentNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" node "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tprev "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" currentNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prev\n\t\t\tnext "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" currentNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next\n\n\t\t\tprev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" next\n\t\t\tnext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prev "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prev\n\t\t\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"delete"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("size"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\tcurrentNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("DList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("PrintAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint64")]),t._v("\n\ti "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\tcurrentNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("head\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetSize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\tcurrentNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\ta "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("InitList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\ta"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tnode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SearchIndex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\ta"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetSize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"golang-list"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#golang-list","aria-hidden":"true"}},[this._v("#")]),this._v(" golang List")])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language-golang extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('func ListOperation() {\n\tlink := list2.New()\n\tlink.PushBack(1)\n\tlink.PushBack(0)\n\tlink.PushFront(2)\n\tlink.PushFront(3)\n\tlink.PushFront(30)\n\tfmt.Println("root", link.Back().Value)\n\t// 遍历链表\n\tfor p := link.Back(); p != link.Front(); p = p.Prev() {\n\t\tfmt.Println("Number", p.Value)\n\t}\n}\n')])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"panic-recover"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#panic-recover","aria-hidden":"true"}},[this._v("#")]),this._v(" panic recover")])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language-golang extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('func main() {\n\tdefer func() {\n\t\tfmt.Println("c")\n\t\tif err := recover(); err != nil {\n\t\t\tfmt.Println(err)\n\t\t}\n\n\t\tfmt.Println("d")\n\t}()\n\n\tfmt.Println("a")\n\tpanic("panic information")\n\tfmt.Println("b")\n\tfmt.Println("f")\n}\n')])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("ul",[n("li",[this._v("result")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[this._v("a\nc\npanic information\nd\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"并发"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#并发","aria-hidden":"true"}},[this._v("#")]),this._v(" 并发")])},function(){var t=this.$createElement,n=this._self._c||t;return n("h3",{attrs:{id:"同步锁-sync-mutex"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#同步锁-sync-mutex","aria-hidden":"true"}},[this._v("#")]),this._v(" 同步锁 sync.Mutex")])},function(){var t=this.$createElement,n=this._self._c||t;return n("ul",[n("li",[this._v("lock、unlock 不在同一个 routine 中，不能保证顺序的一致性。 sync.Mutex 不能对为加锁的 状态解锁，否则会出现异常不能保证正常工作")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language-golang extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('func main() {\n\tvar mu sync.Mutex\n\n\tgo func(){\n\t\tfmt.Println("你好, 世界")\n\t\tmu.Lock()\n\t}()\n\n\tmu.Unlock()\n}\n')])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h3",{attrs:{id:"sync-waitgroup"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sync-waitgroup","aria-hidden":"true"}},[this._v("#")]),this._v(" sync.WaitGroup")])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language-golang extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('func main() {\n\tvar wg sync.WaitGroup\n\n\t// 开N个后台打印线程\n\tfor i := 0; i < 10; i++ {\n\t\tfmt.Println("----")\n\t\twg.Add(1)\n\n\t\tgo func() {\n\t\t\tfmt.Println("你好, 世界" + string(1))\n\t\t\twg.Done()\n\t\t}()\n\t}\n\n\t// 等待N个后台线程完成\n\tfmt.Println("will end")\n\twg.Wait()\n\tfmt.Println("end")\n}\n\n')])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("ul",[n("li",[this._v("result")])])},function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\nwill end\n你好"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 世界\n你好"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 世界\n你好"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 世界\n你好"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 世界\n你好"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 世界\n你好"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 世界\n你好"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 世界\n你好"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 世界\n你好"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 世界\n你好"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 世界\nend\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h3",{attrs:{id:"通道-chan"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#通道-chan","aria-hidden":"true"}},[this._v("#")]),this._v(" 通道 chan")])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language-golang extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('func main() {\n\n\t// 使用 `make(chan val-type)` 创建一个新的通道。\n\t// 通道类型就是他们需要传递值的类型。\n\tmessages := make(chan string)\n\n\t// 使用 `channel <-` 语法 _发送(send)_ 一个新的值到通道中。这里\n\t// 我们在一个新的 Go 协程中发送 `"ping"` 到上面创建的\n\t// `messages` 通道中。\n\tgo func() { messages <- "ping" }()\n\n\t// 使用 `<-channel` 语法从通道中 _接收(receives)_ 一个值。这里\n\t// 将接收我们在上面发送的 `"ping"` 消息并打印出来。\n\tmsg := <-messages\n\tfmt.Println(msg)\n}\n\n')])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"上产消费模型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#上产消费模型","aria-hidden":"true"}},[this._v("#")]),this._v(" 上产消费模型")])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language-golang extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("// 生产者: 生成 factor 整数倍的序列\nfunc Producer(factor int, out chan<- int) {\n\tfor i := 0; ; i++ {\n\t\tout <- i*factor\n\t}\n}\n\n// 消费者\nfunc Consumer(in <-chan int) {\n\tfor v := range in {\n\t\tfmt.Println(v)\n\t}\n}\nfunc main() {\n\tch := make(chan int, 64) // 成果队列\n\n\tgo Producer(3, ch) // 生成 3 的倍数的序列\n\tgo Producer(5, ch) // 生成 5 的倍数的序列\n\tgo Consumer(ch)    // 消费 生成的队列\n\n\t// 运行一定时间后退出\n\ttime.Sleep(5 * time.Second)\n}\n\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"订阅者模式-模型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#订阅者模式-模型","aria-hidden":"true"}},[this._v("#")]),this._v(" 订阅者模式-模型")])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language-golang extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('\ntype (\n\tsubscriber chan interface{} \t// 订阅者为一个管道\n\ttopicFunc func(v interface{}) bool // 主题为一个过滤器, 过滤不同的 订阅者是否分发数据\n)\n\ntype Publisher struct {\n\tm sync.RWMutex\t\t// 读写锁\n\tbuffer int\t\t\t// 订阅队列的缓存大小\n\ttimeout time.Duration\t// 发布超时时间\n\tsubscribers map[subscriber]topicFunc // 订阅者信息\n}\n\n// 创建发布者对象\nfunc NewPublisher(publishTimeOut time.Duration, buffer int) *Publisher {\n\treturn &Publisher{\n\t\tbuffer: buffer,\n\t\ttimeout: publishTimeOut,\n\t\tsubscribers: make(map[subscriber]topicFunc),\n\t}\n}\n\n// 添加订阅者\nfunc (p *Publisher)SubscribeTopic(topic topicFunc) chan interface{} {\n\tch := make(chan interface{}, p.buffer)\n\tp.m.Lock()\n\tp.subscribers[ch] = topic\n\tp.m.Unlock()\n\treturn ch\n}\n\n// 添加订阅者， 订阅全部主题\nfunc (p *Publisher)Subscribe() chan interface{} {\n\treturn p.SubscribeTopic(nil)\n}\n\n// 退出订阅\nfunc (p *Publisher)Evict(sub chan interface{}) {\n\tp.m.Lock()\n\tdefer p.m.Unlock()\n\tdelete(p.subscribers, sub)\n\tclose(sub)\n}\n\n// 发送主题\nfunc (p *Publisher)sendTopic(sub subscriber, topic topicFunc, v interface{}, wg *sync.WaitGroup) {\n\tdefer  wg.Done()\n\t\n\t// 过滤 不同的通道信息\n\tif topic != nil && topic(v) {\n\t\treturn\n\t}\n\n\tselect {\n\t case sub <- v:\n\t \tcase <- time.After(p.timeout):\n\t}\n}\n\n// 发布一个主题\nfunc (p *Publisher)Publish(v interface{}) {\n\tp.m.Lock()\n\tdefer p.m.Unlock()\n\n\tvar wg sync.WaitGroup\n\tfor sub, topic := range  p.subscribers {\n\t\twg.Add(1)\n\t\tgo p.sendTopic(sub, topic, v, &wg)\n\t}\n}\n\n// 关闭所有发布对象，同事关闭所有的订阅者管道\n\nfunc (p *Publisher) Close() {\n\tp.m.Lock()\n\tdefer p.m.Unlock()\n\n\tfor sub := range p.subscribers {\n\t\tdelete(p.subscribers, sub)\n\t\tclose(sub)\n\t}\n}\n\n\nfunc main() {\n\tp := NewPublisher(100*time.Millisecond, 10)\n\tdefer p.Close()\n\n\tall := p.Subscribe()\n\tgolang := p.SubscribeTopic(func(v interface{}) bool {\n\t\tif s, ok := v.(string); ok {\n\t\t\treturn strings.Contains(s, "golang")\n\t\t}\n\t\treturn false\n\t})\n\n\tp.Publish("hello,  world!")\n\tp.Publish("hello, golang!")\n\n\tgo func() {\n\t\tfor  msg := range all {\n\t\t\tfmt.Println("all:", msg)\n\t\t}\n\t} ()\n\n\tgo func() {\n\t\tfor  msg := range golang {\n\t\t\tfmt.Println("golang:", msg)\n\t\t}\n\t} ()\n\n\t// 运行一定时间后退出\n\ttime.Sleep(3 * time.Second)\n}\n\n')])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"range-遍历-array-map-string"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#range-遍历-array-map-string","aria-hidden":"true"}},[this._v("#")]),this._v(" range 遍历 array map string")])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language-golang extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('\nfunc main() {\n\n\t// 这里我们使用 `range` 来对 slice 中的元素求和。\n\t// 对于数组也可以采用这种方法。\n\tnums := []int{2, 3, 4}\n\tsum := 0\n\tfor index, num := range nums {\n\t\tsum += num\n\t\tfmt.Print(index)\n\t\tfmt.Print("-")\n\t\tfmt.Println(num)\n\t}\n\tfmt.Println("sum:", sum)\n\n\t// `range` 在数组和 slice 中提供对每项的索引和值的访问。\n\t// 上面我们不需要索引，所以我们使用 _空白标识符_\n\t// `_` 来忽略它。有时候我们实际上是需要这个索引的。\n\tfor i, num := range nums {\n\t\tif num == 3 {\n\t\t\tfmt.Println("index:", i)\n\t\t}\n\t}\n\n\t// `range` 在 map 中迭代键值对。\n\tkvs := map[string]string{"a": "apple", "b": "banana"}\n\tfor k, v := range kvs {\n\t\tfmt.Printf("%s -> %s\\n", k, v)\n\t}\n\n\t// `range` 也可以只遍历 map 的键。\n\tfor k := range kvs {\n\t\tfmt.Println("key:", k)\n\t}\n\n\t// `range` 在字符串中迭代 unicode 码点(code point)。\n\t// 第一个返回值是字符的起始字节位置，然后第二个是字符本身。\n\tfor i, c := range "go" {\n\t\tfmt.Println(i, c)\n\t}\n}\n\n')])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"素数计算"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#素数计算","aria-hidden":"true"}},[this._v("#")]),this._v(" 素数计算")])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language-golang extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("func isPrime(value int) bool {\n\tif value <= 3 {\n\t\treturn value >= 2\n\t}\n\n\tif value%2 == 0 || value%3 == 0 {\n\t\treturn false\n\t}\n\n\tfor i := 5; i * i < value; i+= 6 {\n\t\tif value %i == 0 || value %(i+2) == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tfor i := 0; i < 10000; i++ {\n\t\tif isPrime(i) {\n\t\t\tfmt.Println(i)\n\t\t}\n\t}\n}\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"select-用法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#select-用法","aria-hidden":"true"}},[this._v("#")]),this._v(" select 用法")])},function(){var t=this.$createElement,n=this._self._c||t;return n("ul",[n("li",[this._v("随机一个 channel 执行")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language-golang extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('func main() {\n\tch1 := make(chan int, 2)\n\tch2 := make(chan int, 2)\n\n\tch1 <- 3\n\tch2 <- 5\n\tch1 <- 2\n\n\tselect {\n\tcase <- ch1:\n\n\t\tfmt.Println("ch1 selected.")\n\n\t\tbreak\n\n\t\tfmt.Println("ch1 selected after break")\n\tcase <- ch2:\n\n\t\tfmt.Println("ch2 selected.")\n\t\tfmt.Println("ch2 selected without break")\n\t}\n}\n')])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"golang-相关语法重点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#golang-相关语法重点","aria-hidden":"true"}},[this._v("#")]),this._v(" golang 相关语法重点")])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"select-epoll-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#select-epoll-的区别","aria-hidden":"true"}},[this._v("#")]),this._v(" select epoll 的区别")])}],!1,null,null,null);n.default=e.exports}}]);