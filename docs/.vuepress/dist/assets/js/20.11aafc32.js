(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{77:function(t,e,s){"use strict";s.r(e);var a=s(0),r=Object(a.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._m(4),t._m(5),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),s("p",[s("a",{attrs:{href:"https://blog.csdn.net/liukuan73/article/details/82585732",target:"_blank",rel:"noopener noreferrer"}},[t._v("service"),s("OutboundLink")],1)]),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._m(12),t._v(" "),t._m(13),t._m(14),t._v(" "),t._m(15),t._m(16),t._v(" "),t._m(17),t._m(18),t._v(" "),t._m(19),t._m(20),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.bilibili.com/video/av60476564?from=search&seid=1428698472244882116",target:"_blank",rel:"noopener noreferrer"}},[t._v("推荐视频"),s("OutboundLink")],1)]),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"docker-简单打包镜像-for-mac"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-简单打包镜像-for-mac","aria-hidden":"true"}},[this._v("#")]),this._v(" Docker 简单打包镜像 for mac")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"demo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#demo","aria-hidden":"true"}},[this._v("#")]),this._v(" demo")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ol",[s("li",[t._v("创建 docker 文件夹。")]),t._v(" "),s("li",[t._v("docker 文件夹中创建 Dockerfile main.go 文件。 文件目录如下：")]),t._v(" "),s("li",[t._v("main.go 中的代码，和 Dockerfile 中的内容如下")]),t._v(" "),s("li",[t._v("进入 docker 文件夹中执行： docker build -t zcdocker .")]),t._v(" "),s("li",[t._v("运行 docker run -it -d -p 9191:8080  zcdocker")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-Dir extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("- docker\n - Dockerfile\n - main.go\n")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"net/http"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\thttp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("HandleFunc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/zc"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("hello"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\thttp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ListenAndServe")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('":8080"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("hello")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ResponseWriter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello Docker Form Golang!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-Dockerfile extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('FROM golang # 基础镜像\n\nMAINTAINER lanys "550709871@qq.com" # 作者 联系方式\n\nWORKDIR $GOPATH/src/godocker # 为后续命令配置工作目录\n\nADD . $GOPATH/src/godocker # ADD SRC DEST\n\nRUN go build main.go\n\nEXPOSE 8080\n\nENTRYPOINT ["./main"] # 运行时候指定的命令\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"kubectl-k8s"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#kubectl-k8s","aria-hidden":"true"}},[this._v("#")]),this._v(" kubectl (k8s)")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("下载 docker 的 edge 版本（一定要这个版本）")]),this._v(" "),e("li",[this._v("自行用 docker 拉取 kubernetes 的相关镜像")]),this._v(" "),e("li",[this._v("还不行，就尝试 vpn 然后，重新启动 docker、kubernetes")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#流程","aria-hidden":"true"}},[this._v("#")]),this._v(" 流程")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("service")]),this._v(" "),e("li",[this._v("deployment (如果没有这层，pod 只可以在集群内部访问)")]),this._v(" "),e("li",[this._v("pod")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"delete"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#delete","aria-hidden":"true"}},[this._v("#")]),this._v(" delete")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-kubectl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("kubectl delete pod example-pod\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"create"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#create","aria-hidden":"true"}},[this._v("#")]),this._v(" create")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-kubectl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("kubectl create -f pod.yaml # 穿件一个 pod\nkubectl delete -f pod.yaml # 可以删除创建的 pod\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"获取当前的-pod"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获取当前的-pod","aria-hidden":"true"}},[this._v("#")]),this._v(" 获取当前的 pod")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("kubectl get pods\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"获取当前的-service"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获取当前的-service","aria-hidden":"true"}},[this._v("#")]),this._v(" 获取当前的 service")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("kubectl get service\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"查看集群信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看集群信息","aria-hidden":"true"}},[this._v("#")]),this._v(" 查看集群信息")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-kubectl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("kubectl cluster-info\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"kubenetes-介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#kubenetes-介绍","aria-hidden":"true"}},[this._v("#")]),this._v(" kubenetes 介绍")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("kubenets 是什么\n"),s("ul",[s("li",[t._v("自动化容器编排系统")]),t._v(" "),s("li",[t._v("自动化容器部署、扩展和管理")]),t._v(" "),s("li",[t._v("借鉴与 google 内部集群管理系统 borg 和 omega （15年的生产环境应用经验）")]),t._v(" "),s("li",[t._v("驾驶员（pivlot）舵手（helmsman）")])])]),t._v(" "),s("li",[t._v("解决什么问题")]),t._v(" "),s("li",[t._v("为什么这么火\n"),s("ul",[s("li",[t._v("kubernetes 架构介绍")]),t._v(" "),s("li",[t._v("minikube 部署")]),t._v(" "),s("li",[t._v("kubernetes 核心概念介绍及操作实战")])])]),t._v(" "),s("li",[t._v("什么是容器\n"),s("ul",[s("li",[t._v("一系列隔离运行的进程，每个容器都有自己的 pid user uts network 栈命名空间")]),t._v(" "),s("li",[t._v("与传统的 vm 启动快、性能消耗小、更轻量级")])])]),t._v(" "),s("li",[t._v("创新的地方\n"),s("ul",[s("li",[t._v("cgroup， namespace，（linux 提供）")]),t._v(" "),s("li",[t._v("union fs （Aufs， device mapper）联合文件系统")])])]),t._v(" "),s("li",[t._v("k8s 默认使用 docker 引擎")]),t._v(" "),s("li",[t._v("容器的编排（其他系统：docker swarm, mesos, kubernetes）\n"),s("ul",[s("li",[t._v("容器解决了应用一次打包， 部署，运行问题\n"),s("ul",[s("li",[t._v("一次打包随处运行")])])]),t._v(" "),s("li",[t._v("容器的挑战\n"),s("ul",[s("li",[t._v("跨机器部署")]),t._v(" "),s("li",[t._v("资源调度")]),t._v(" "),s("li",[t._v("负载均衡")]),t._v(" "),s("li",[t._v("自动伸缩")]),t._v(" "),s("li",[t._v("容错处理")]),t._v(" "),s("li",[t._v("服务发现")]),t._v(" "),s("li",[t._v("docker compose // 本地容器启动使用 同时启动服务相关的容器， 类比 kubernetes")])])]),t._v(" "),s("li",[t._v("容器的调度，资源管理，服务管理")]),t._v(" "),s("li",[t._v("把整个数据中心，当做一个抽象的机器， 10000台 3.1万核， 100T 内存")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"kubernetes-架构核心介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes-架构核心介绍","aria-hidden":"true"}},[this._v("#")]),this._v(" kubernetes 架构核心介绍")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("结构\n"),s("ul",[s("li",[t._v("master")]),t._v(" "),s("li",[t._v("worknode")])])]),t._v(" "),s("li",[t._v("master\n"),s("ul",[s("li",[t._v("api server - 接收用户额命令请求")]),t._v(" "),s("li",[t._v("scheduler - 资源调度，")]),t._v(" "),s("li",[t._v("controller manager - 监控 docker 服务运行的情况\n"),s("ul",[s("li",[t._v("dashboard(addons)")])])])])]),t._v(" "),s("li",[t._v("kubelet\n"),s("ul",[s("li",[t._v("运行 node 上的 agent")]),t._v(" "),s("li",[t._v("处理 master 节点下发到本地节点的任务，管理pod和其中的容器")]),t._v(" "),s("li",[t._v("定期向 master 汇报节点资源的使用情况")])])]),t._v(" "),s("li",[t._v("kube-proxy\n"),s("ul",[s("li",[t._v("运行在 node 节点上的 agent")]),t._v(" "),s("li",[t._v("实现 service 的抽象， 为一组 pod 抽象的服务（service）提供统一接口并土工负载均衡功能")])])]),t._v(" "),s("li",[t._v("Container Runtime\n"),s("ul",[s("li",[t._v("Docker")]),t._v(" "),s("li",[t._v("Rkt")])])]),t._v(" "),s("li",[t._v("Etcd\n"),s("ul",[s("li",[t._v("类似与 zookeeper， 有高一致性")]),t._v(" "),s("li",[t._v("用于保存集群所有的网络配置和对象的状态信息。")]),t._v(" "),s("li",[t._v("k8s 中用作分布式 kv 存储系统")])])]),t._v(" "),s("li",[t._v("以下虚线部分为物理机，也可以看做虚拟机")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"/docs/assets/k8s3.png",alt:"架构"}})])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("调用流程\n"),s("ul",[s("li",[t._v("用户通过 kubectl 来操作，如：部署新的应用")]),t._v(" "),s("li",[t._v("api server 请求，并存储在 Etcd")]),t._v(" "),s("li",[t._v("watcher 和 controllers  检测到资源状态的变化，并进行操作")]),t._v(" "),s("li",[t._v("replicaset watcher、controller 检测到新的 app， 创建 新的 pod 达到期望的示例个数")]),t._v(" "),s("li",[t._v("kubelet 检测 pods， 并通过容器运行时部署他们")]),t._v(" "),s("li",[t._v("kubeporxy 管理 pod 的网络， 包括服务发现，负载均衡")])])]),t._v(" "),s("li",[t._v("可以使用 minikube 本地部署")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"/docs/assets/k8s2.png",alt:"node"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"/docs/assets/k8s1.png",alt:"master"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"kubenetes-常用对象介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#kubenetes-常用对象介绍","aria-hidden":"true"}},[this._v("#")]),this._v(" kubenetes 常用对象介绍")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[s("p",[t._v("所有的均为资源")]),t._v(" "),s("ul",[s("li",[t._v("资源实例化后就是对象")]),t._v(" "),s("li",[t._v("work load: pod, replicationcontroller, replicaset, delployment, statefulset, deamonset, job, cronjob, 主要介绍前四种")]),t._v(" "),s("li",[t._v("Service discovery/balance:serivce, ingress")]),t._v(" "),s("li",[t._v("配置与存储： volume, CSI,  configMap， Secret")]),t._v(" "),s("li",[t._v("集群级别资源\n"),s("ul",[s("li",[t._v("NameSpace(kube-system, default, node)")])])]),t._v(" "),s("li",[t._v("元数据相关资源\n"),s("ul",[s("li",[t._v("hpa, podtemplate, limitrange")])])])])]),t._v(" "),s("li",[s("p",[t._v("通过 restful api 来对对象进行操作（apiserver json）")]),t._v(" "),s("ul",[s("li",[t._v("kubectl => restful 调用")]),t._v(" "),s("li",[t._v("yaml")])])]),t._v(" "),s("li",[s("p",[t._v("命令式（一步一步调用过程，达成目标）和声明式（只说目标，不管过程）- 一般使用后两种(最终都是将 yaml 文件转换问 json 发送到 apiserver 上)")]),t._v(" "),s("ul",[s("li",[t._v("kubectl run nginx /// 命令")]),t._v(" "),s("li",[t._v("kubectl create/delete *.yaml")]),t._v(" "),s("li",[t._v("kubectl apply + *.yaml")])])]),t._v(" "),s("li",[s("p",[t._v("resource definition")]),t._v(" "),s("ul",[s("li",[t._v("apiVersion")]),t._v(" "),s("li",[t._v("Kind: Pod/RC/RS/Depolyment")]),t._v(" "),s("li",[t._v("Meta:\n"),s("ul",[s("li",[t._v("Name:")]),t._v(" "),s("li",[t._v("NameSpace:")]),t._v(" "),s("li",[t._v("Label:")])])]),t._v(" "),s("li",[t._v("Spec:\n"),s("ul",[s("li",[t._v("不容类型的资源， 描述")])])]),t._v(" "),s("li",[t._v("status // 系统填的")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-kubectl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("kubectl explain\tpod.Meta // 告诉你pod 应该怎么写\nkubectl api-resources\t// 查看有哪些使用的资源\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("下图为一个 pod 的结构\n"),e("ul",[e("li",[this._v("pause 容器只为多个 container 创建 一个虚拟网卡")]),this._v(" "),e("li",[this._v("如果没有 pause 容器，只有一个 container 则为 docker 的结构")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"/docs/assets/k8s0.png",alt:"image"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"kubenetes-service"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#kubenetes-service","aria-hidden":"true"}},[this._v("#")]),this._v(" kubenetes service")])}],!1,null,null,null);e.default=r.exports}}]);